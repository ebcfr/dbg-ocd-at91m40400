
adapter driver jlink
adapter speed 16000

set CHIPNAME at91m40400

### Script for AT91EB01

if { [info exists CHIPNAME] } {
   set  _CHIPNAME $CHIPNAME
} else {
   set  _CHIPNAME at91eb40a
}

if { [info exists ENDIAN] } {
   set  _ENDIAN $ENDIAN
} else {
   set  _ENDIAN little
}

if { [info exists CPUTAPID] } {
   set _CPUTAPID $CPUTAPID
} else {
   set _CPUTAPID 0x1f0f0f0f
}


#Atmel ties SRST & TRST together, at which point it makes
#no sense to use TRST, but use TMS instead.
#
#The annoying thing with tying SRST & TRST together is that
#there is no way to halt the CPU *before and during* the
#SRST reset, which means that the CPU will run a number
#of cycles before it can be halted(as much as milliseconds).
reset_config srst_only srst_pulls_trst

#jtag scan chain
jtag newtap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID

#target configuration
set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME arm7tdmi -endian $_ENDIAN -chain-position $_TARGETNAME

# speed up memory downloads, provides errors
#arm7_9 fast_memory_access enable
#arm7_9 dcc_downloads enable

#flash driver (bad driver)
#set _FLASHNAME $_CHIPNAME.flash
#flash bank $_FLASHNAME cfi 0x01010000 0x10000 2 2 $_TARGETNAME

# target RAM.
$_TARGETNAME configure -work-area-phys 0x00030000 -work-area-size 0x1000 -work-area-backup 0

$_TARGETNAME configure -event reset-end {
	echo "Running reset end script for AT91EB40A"
	# Reset script for AT91EB40a
	#reg cpsr 0x000000D3
	soft_reset_halt
	# set external flash @0x01000000
	mww 0xffe00000 0x01002535
	# set external SRAM @0x02000000
	mww 0xffe00004 0x02002121
	# set MCR register
	mww 0xffe00024 0x00000006
	# disable all interrupts
	mww 0xFFFFF124 0xFFFFFFFF
	# change the mapping!
	mww 0xffe00020 1
}
